// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do:
//
//    using PactV1;
//
//    var contract = Contract.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace PactV1
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    /// <summary>
    /// Schema for a Pact file
    /// </summary>
    public partial class Contract
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("consumer")]
        public Pacticipant Consumer { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("interactions")]
        public List<Interaction> Interactions { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("metadata")]
        public Metadata Metadata { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("provider")]
        public Pacticipant Provider { get; set; }
    }

    public partial class Pacticipant
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("name")]
        public string Name { get; set; }
    }

    public partial class Interaction
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("description")]
        public string Description { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("provider_state")]
        public string InteractionProviderState { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("providerState")]
        public string ProviderState { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("request")]
        public Request Request { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("response")]
        public Response Response { get; set; }
    }

    public partial class Request
    {
        [JsonPropertyName("body")]
        public object Body { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("headers")]
        public Dictionary<string, object> Headers { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("method")]
        public Method? Method { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("path")]
        public string Path { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("query")]
        public string Query { get; set; }
    }

    public partial class Response
    {
        [JsonPropertyName("body")]
        public object Body { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("headers")]
        public Dictionary<string, object> Headers { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("status")]
        public long? Status { get; set; }
    }

    public partial class Metadata
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("pact-specification")]
        public PactSpecification PactSpecification { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("pactSpecification")]
        public PactSpecificationClass MetadataPactSpecification { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("pactSpecificationVersion")]
        public string PactSpecificationVersion { get; set; }
    }

    public partial class PactSpecificationClass
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("version")]
        public string Version { get; set; }
    }

    public partial class PactSpecification
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("version")]
        public string Version { get; set; }
    }

    public enum Method { Connect, Delete, Get, Head, MethodConnect, MethodDelete, MethodGet, MethodHead, MethodOptions, MethodPost, MethodPut, MethodTrace, Options, Post, Put, Trace };

    public partial class Contract
    {
        public static Contract FromJson(string json) => JsonSerializer.Deserialize<Contract>(json, PactV1.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Contract self) => JsonSerializer.Serialize(self, PactV1.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                MethodConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class MethodConverter : JsonConverter<Method>
    {
        public override bool CanConvert(Type t) => t == typeof(Method);

        public override Method Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "CONNECT":
                    return Method.MethodConnect;
                case "DELETE":
                    return Method.MethodDelete;
                case "GET":
                    return Method.MethodGet;
                case "HEAD":
                    return Method.MethodHead;
                case "OPTIONS":
                    return Method.MethodOptions;
                case "POST":
                    return Method.MethodPost;
                case "PUT":
                    return Method.MethodPut;
                case "TRACE":
                    return Method.MethodTrace;
                case "connect":
                    return Method.Connect;
                case "delete":
                    return Method.Delete;
                case "get":
                    return Method.Get;
                case "head":
                    return Method.Head;
                case "options":
                    return Method.Options;
                case "post":
                    return Method.Post;
                case "put":
                    return Method.Put;
                case "trace":
                    return Method.Trace;
            }
            throw new Exception("Cannot unmarshal type Method");
        }

        public override void Write(Utf8JsonWriter writer, Method value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case Method.MethodConnect:
                    JsonSerializer.Serialize(writer, "CONNECT", options);
                    return;
                case Method.MethodDelete:
                    JsonSerializer.Serialize(writer, "DELETE", options);
                    return;
                case Method.MethodGet:
                    JsonSerializer.Serialize(writer, "GET", options);
                    return;
                case Method.MethodHead:
                    JsonSerializer.Serialize(writer, "HEAD", options);
                    return;
                case Method.MethodOptions:
                    JsonSerializer.Serialize(writer, "OPTIONS", options);
                    return;
                case Method.MethodPost:
                    JsonSerializer.Serialize(writer, "POST", options);
                    return;
                case Method.MethodPut:
                    JsonSerializer.Serialize(writer, "PUT", options);
                    return;
                case Method.MethodTrace:
                    JsonSerializer.Serialize(writer, "TRACE", options);
                    return;
                case Method.Connect:
                    JsonSerializer.Serialize(writer, "connect", options);
                    return;
                case Method.Delete:
                    JsonSerializer.Serialize(writer, "delete", options);
                    return;
                case Method.Get:
                    JsonSerializer.Serialize(writer, "get", options);
                    return;
                case Method.Head:
                    JsonSerializer.Serialize(writer, "head", options);
                    return;
                case Method.Options:
                    JsonSerializer.Serialize(writer, "options", options);
                    return;
                case Method.Post:
                    JsonSerializer.Serialize(writer, "post", options);
                    return;
                case Method.Put:
                    JsonSerializer.Serialize(writer, "put", options);
                    return;
                case Method.Trace:
                    JsonSerializer.Serialize(writer, "trace", options);
                    return;
            }
            throw new Exception("Cannot marshal type Method");
        }

        public static readonly MethodConverter Singleton = new MethodConverter();
    }
    
    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
                get => _dateTimeStyles;
                set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
                get => _dateTimeFormat ?? string.Empty;
                set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
                get => _culture ?? CultureInfo.CurrentCulture;
                set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
                string text;


                if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                        || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
                {
                        value = value.ToUniversalTime();
                }

                text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

                writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                string? dateText = reader.GetString();

                if (string.IsNullOrEmpty(dateText) == false)
                {
                        if (!string.IsNullOrEmpty(_dateTimeFormat))
                        {
                                return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                        }
                        else
                        {
                                return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                        }
                }
                else
                {
                        return default(DateTimeOffset);
                }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
